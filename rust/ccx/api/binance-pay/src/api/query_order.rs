use rust_decimal::Decimal;
use serde::Deserialize;
use serde::Serialize;

use crate::api::Api;
use crate::error::LibResult;
use crate::json_string;
use crate::opt_uuid_simple;
use crate::types::enums::StatusOrder;
use crate::types::enums::StatusRequest;
use crate::types::enums::TradeType;
use crate::types::time::Time;
use crate::uuid_simple;

pub const BINANCEPAY_OPENAPI_ORDER_QUERY: &str = "/binancepay/openapi/order/query";

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct QueryOrderRequest {
    #[serde(rename = "merchantId")]
    pub merchant_id: u64, // long	    mandatory	-	The merchant account id, issued when merchant been created at Binance.
    #[serde(rename = "subMerchantId")]
    pub sub_merchant_id: Option<u64>, // long	    optional	-	The sub merchant account id, issued when sub merchant been created at Binance.
    #[serde(rename = "merchantTradeNo", with = "opt_uuid_simple")]
    pub merchant_trade_no: Option<uuid::Uuid>, // string	optional	letter or digit, no other symbol allowed, can not be empty if prepayId is empty	The order id, Unique identifier for the request
    #[serde(rename = "prepayId")]
    pub prepay_id: Option<String>, // string	optional	letter or digit, no other symbol allowed, can not be empty if merchantTradeNo is empty	Binance unique order id
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct QueryOrderResult {
    #[serde(rename = "merchantId")]
    pub merchant_id: u64, // long	    Y	-	The merchant account id, issued when merchant been created at Binance.
    #[serde(rename = "prepayId")]
    pub prepay_id: String, // string	Y	-	unique id generated by binance
    #[serde(rename = "transactionId")]
    pub transaction_id: Option<String>, // string	N	-	issued once the payment is successful
    #[serde(rename = "merchantTradeNo", with = "uuid_simple")]
    pub merchant_trade_no: uuid::Uuid, // string	Y	-	letter or digit, no other symbol allowed, can not be empty if prepayId is empty
    #[serde(rename = "tradeType")]
    pub trade_type: TradeType, // string	Y	-   "WEB", "APP"	operate entrance
    pub status: StatusOrder, // string	Y	-   "INITIAL", "PENDING", "PAID", "CANCELED", "ERROR", "REFUNDING", "REFUNDED", "EXPIRED"	order status
    pub currency: String,    // string	Y	-	order currency
    #[serde(rename = "totalFee")]
    pub total_fee: Decimal, // decimal	Y	-	order amount
    #[serde(rename = "productName")]
    pub product_name: String, // string	Y	-	product name
    #[serde(rename = "productDetail")]
    pub product_detail: String, // string	Y	-	product detail
    #[serde(rename = "openUserId")]
    pub open_user_id: Option<String>, // string	N	-	Consumer unique id
    #[serde(rename = "transactTime")]
    pub transact_time: Option<i64>, // long	    N	-	Timestamp when transaction happened
    #[serde(rename = "createTime")]
    pub create_time: i64, // long	    Y	-	Timestamp when order was created
    #[serde(rename = "payerInfo")]
    #[serde(default, with = "json_string")]
    pub payer_info: Option<PayerInfo>, // long	    Y	-	only merchant got approved by Binance Operation's approval will receive this payerInfo; payer information, refer to
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct PayerInfo {
    #[serde(rename = "firstName")]
    pub first_name: String, //	string	Y	-	first name
    #[serde(rename = "middleName")]
    #[serde(default)]
    pub middle_name: Option<String>, //	string	N	-	middle name
    #[serde(rename = "lastName")]
    pub last_name: String, //	string	Y	-	last name
    #[serde(rename = "walletId")]
    pub wallet_id: String, //	string	Y	-	wallet id
    #[serde(default)]
    pub country: Option<String>, //	string	N	-	residential country
    #[serde(default)]
    pub city: Option<String>, //	string	N	-	residential city
    #[serde(default)]
    pub address: Option<String>, //	string	N	-	residential address
    #[serde(rename = "identityType")]
    #[serde(default)]
    pub identity_type: Option<String>, //	string	N	-	identity type
    #[serde(rename = "identityNumber")]
    #[serde(default)]
    pub identity_number: Option<String>, //	string	N	-	identify number
    #[serde(rename = "dateOfBirth")]
    #[serde(default)]
    pub date_of_birth: Option<String>, //	string	N	-	date of birth
    #[serde(rename = "placeOfBirth")]
    #[serde(default)]
    pub place_of_birth: Option<String>, //	string	N	-	original place of birth
    #[serde(default)]
    pub nationality: Option<String>, //	string	N	-	payer nationality
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct QueryOrderResponse {
    pub status: StatusRequest, // string	            Y	"SUCCESS" or "FAIL"	status of the API request
    pub code: String,          // string	            Y	-	request result code, refer to
    pub data: Option<QueryOrderResult>, // QueryOrderResult	    N	-	response body, refer to
    #[serde(rename = "errorMessage")]
    pub error_message: Option<String>, // string	            Y	-
}

impl<S: crate::client::BinancePaySigner> Api<S> {
    pub async fn query_order(
        &self,
        request: QueryOrderRequest,
        time_window: impl Into<Time>,
    ) -> LibResult<QueryOrderResponse> {
        self.client
            .post_json(BINANCEPAY_OPENAPI_ORDER_QUERY, request)?
            .signed(time_window)?
            .random_nonce()?
            .send()
            .await
    }
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_serde_query_request() {
        let request = QueryOrderRequest {
            merchant_id: 134697918,
            sub_merchant_id: Some(134697918),
            merchant_trade_no: Some(
                uuid::Uuid::parse_str("9a1c04a0-6dbc-432e-94fa-4e2bd693c663")
                    .expect("Failed parse_str"),
            ),
            prepay_id: Some("99695089974435840".to_string()),
        };
        let json = serde_json::to_string(&request).expect("Failed to_string");
        println!("test_serde_query_request :: {}", json);
    }

    #[test]
    fn test_serde_query_response_no_payer() {
        let example = r#"
        {
            "status":"SUCCESS",
            "code":"000000",
            "data":{
                "merchantId":134697918,
                "prepayId":"99695089974435840",
                "merchantTradeNo":"9a1c04a06dbc432e94fa4e2bd693c663",
                "tradeType":"WEB",
                "status":"INITIAL",
                "currency":"BUSD",
                "totalFee":"0.50000000",
                "productName":"Ice Cream",
                "productDetail":"Greentea ice cream cone",
                "createTime":1624260944011
            }
        }
        "#;
        let response: QueryOrderResponse = serde_json::from_str(example).expect("Failed from_str");
        println!("test_serde_query_response response :: {:#?}", response);
    }

    #[test]
    fn test_serde_query_response_with_payer() {
        let example = r#"
        {
            "status":"SUCCESS",
            "code":"000000",
            "data":{
                "merchantId":134697918,
                "prepayId":"99695089974435840",
                "merchantTradeNo":"9a1c04a06dbc432e94fa4e2bd693c663",
                "tradeType":"WEB",
                "status":"INITIAL",
                "currency":"BUSD",
                "totalFee":"0.50000000",
                "productName":"Ice Cream",
                "productDetail":"Greentea ice cream cone",
                "createTime":1624260944011,
                "payerInfo": "{\"firstName\":\"first_name\",\"lastName\":\"last_name\",\"walletId\":\"wallet_id\"}"
            }
        }
        "#;
        let response: QueryOrderResponse = serde_json::from_str(example).expect("Failed from_str");
        println!("test_serde_query_response response :: {:#?}", response);
    }
}
