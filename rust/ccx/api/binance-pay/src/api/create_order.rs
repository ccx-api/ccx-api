use rust_decimal::Decimal;
use serde::Deserialize;
use serde::Serialize;

use crate::api::Api;
use crate::error::LibResult;
use crate::types::enums::StatusRequest;
use crate::types::enums::TradeType;
use crate::types::time::Time;
use crate::uuid_simple;

const BINANCEPAY_OPENAPI_ORDER: &str = "/binancepay/openapi/order";

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct CreateOrderRequest {
    #[serde(rename = "merchantId")]
    pub merchant_id: u64, // long	        Y	-   The merchant account id, issued when merchant been created at Binance.
    #[serde(rename = "subMerchantId")]
    pub sub_merchant_id: Option<u64>, // long	        N	-   The sub merchant account id, issued when sub merchant been created at Binance.
    #[serde(rename = "merchantTradeNo", with = "uuid_simple")]
    pub merchant_trade_no: uuid::Uuid, // string	    Y	-   letter or digit, no other symbol allowed	The order id, Unique identifier for the request
    #[serde(rename = "tradeType")]
    pub trade_type: TradeType, // string	    Y	-   "WEB", "APP"	operate entrance
    #[serde(rename = "totalFee")]
    pub total_fee: Decimal, // decimal	    Y	-   minimum unit: 0.01, minimum equivalent value: 0.5 USD	order amount
    pub currency: String, // string	    Y	-   only crypto token accepted, fiat NOT supported.	order currency, e.g. "BUSD"
    #[serde(rename = "productType")]
    pub product_type: String, // string	    Y	-   maximum length 16	product type
    #[serde(rename = "productName")]
    pub product_name: String, // string	    Y	-   maximum length 256	product name
    #[serde(rename = "productDetail")]
    pub product_detail: Option<String>, // string	    N	-   maximum length 256	product detail
    #[serde(rename = "returnUrl")]
    pub return_url: Option<String>, // string	    N	-   maximum length 256	redirect url
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct OrderResult {
    #[serde(rename = "prepayId")]
    pub prepay_id: String, // string	    Y	-	unique id generated by binance
    #[serde(rename = "tradeType")]
    pub trade_type: String, // string	    Y	-   "WEB", "APP"	operate entrance
    #[serde(rename = "expireTime")]
    pub expire_time: i64, // string	    Y	-	expire time in milli seconds
    #[serde(rename = "qrcodeLink")]
    pub qrcode_link: String, // string	    Y	-	qr code img link
    #[serde(rename = "qrContent")]
    pub qr_content: String, // string	    Y	-	qr contend info
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct CreateOrderResponse {
    pub status: StatusRequest, // string       Y   -   "SUCCESS" or "FAIL"	status of the API request
    pub code: String,          // string       Y	-	request result code, refer to
    pub data: Option<OrderResult>, // OrderResult  Y	-	response body, refer to
    #[serde(rename = "errorMessage")]
    pub error_message: Option<String>, // string       Y	-
}

impl<S: crate::client::BinancePaySigner> Api<S> {
    pub async fn create_order(
        &self,
        request: CreateOrderRequest,
        time_window: impl Into<Time>,
    ) -> LibResult<CreateOrderResponse> {
        self.client
            .post_json(BINANCEPAY_OPENAPI_ORDER, request)?
            .signed(time_window)?
            .random_nonce()?
            .send()
            .await
    }
}
