use bon::Builder;
use serde::Deserialize;
use serde::Serialize;
use smart_string::SmartString;

use crate::proto::Request;
use crate::proto::SignedRequest;
use crate::types::rate_limits::RateLimitType;

use super::Order;

impl Request for CancelOrder {
    type Response = Order;
    const HTTP_METHOD: http::Method = http::Method::DELETE;
    const ENDPOINT: &'static str = "/api/v3/order";
    const COSTS: &'static [(RateLimitType, u32)] = &[(RateLimitType::RequestWeight, 1)];
}

impl SignedRequest for CancelOrder {}

// symbol	STRING	YES
// orderId	LONG	NO
// origClientOrderId	STRING	NO
// newClientOrderId	STRING	NO	Used to uniquely identify this cancel. Automatically generated by default.
// cancelRestrictions	ENUM	NO	Supported values:
//                                  ONLY_NEW - Cancel will succeed if the order status is NEW.
//                                  ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.

/// [Cancel order (TRADE)](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-order-trade).
///
/// Cancel an active order.
///
/// Weight: 1
#[derive(Debug, Serialize, Deserialize, Clone, Eq, PartialEq, Builder)]
#[serde(rename_all = "camelCase")]
#[builder(on(SmartString, into))]
pub struct CancelOrder {
    symbol: SmartString,
    order_id: Option<u64>,
    orig_client_order_id: Option<SmartString>,
    new_client_order_id: Option<SmartString>,
    cancel_restrictions: Option<CancelRestrictions>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq, Clone)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CancelRestrictions {
    OnlyNew,
    OnlyPartiallyFilled,
}
