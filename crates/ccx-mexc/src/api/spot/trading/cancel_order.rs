use bon::Builder;
use rust_decimal::Decimal;
use serde::Deserialize;
use serde::Serialize;
use smart_string::SmartString;

use crate::proto::SignedRequest;
use crate::proto::{Request, Response};

use super::{MarketSide, OrderStatus, OrderType, TimeInForce};

impl Request for CancelOrder {
    type Response = CancelOrderResponse;
    const HTTP_METHOD: http::Method = http::Method::DELETE;
    const ENDPOINT: &'static str = "/api/v3/order";
    const COST: u32 = 1;
}

impl SignedRequest for CancelOrder {}

/// Cancel Order (TRADE)
///
/// Cancel an active order.
///
/// Weight(IP): 1
///
/// * newClientOrderId Used to uniquely identify this cancel. Automatically generated by default.
///
/// Either orderId or origClientOrderId must be sent.
#[derive(Debug, Serialize, Deserialize, Clone, Eq, PartialEq, Builder)]
#[serde(rename_all = "camelCase")]
#[builder(on(SmartString, into))]
pub struct CancelOrder {
    symbol: SmartString,
    order_id: Option<SmartString>,
    orig_client_order_id: Option<SmartString>,
    new_client_order_id: Option<SmartString>,
    cancel_restrictions: Option<CancelRestrictions>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq, Clone)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CancelRestrictions {
    OnlyNew,
    OnlyPartiallyFilled,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct CancelOrderResponse {
    pub symbol: String,
    pub orig_client_order_id: String,
    pub order_id: String,
    // FIXME make None when -1.
    pub order_list_id: Option<i64>,
    pub client_order_id: String,
    pub price: Decimal,
    pub orig_qty: Decimal,
    pub executed_qty: Decimal,
    // FIXME make None when < 0.
    pub cummulative_quote_qty: Decimal,
    pub status: OrderStatus,
    pub time_in_force: TimeInForce,
    pub r#type: OrderType,
    pub side: MarketSide,
}

impl Response for CancelOrderResponse {}
